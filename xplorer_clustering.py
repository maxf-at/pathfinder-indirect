#!/usr/bin/env python3
# coding: utf-8

import time
import subprocess
import sys

import networkx as nx
import matplotlib.pyplot as plt
import seaborn
plt.style.use('seaborn-whitegrid')
import numpy as np
import pandas as pd

from dataclasses import dataclass

from sklearn.metrics.pairwise import pairwise_distances
from sklearn.cluster import AgglomerativeClustering

import hdbscan

import findpath
import pathfinder
import pathfinder_i_cache


import RNA
import RNAxplorer


# @dataclass(frozen=True) # autohash
@dataclass
class structure_node:
    __slots__ = ('__dict__', 'structure', 'bp_dist_s1', 'bp_dist_s2', 'en')
    structure: str
    bp_dist_s1: int
    bp_dist_s2: int
    en: int

    max_en_s1: int = 0
    max_en_s2: int = 0

    def __str__(self):
        return f'{self.structure} -> {self.en:2.2f}'

    def __eq__(self, other):
        "Checks if equal."
        return self.structure == other.structure

    def __hash__(self):
        """Make the instances hashable."""
        return hash(self.structure)


# @dataclass(frozen=True) # autohash
# class intermediate:
#     structure: str
#     bp_dist_s1: int
#     bp_dist_s2: int
#     en: int
#     def __str__(self):
#         return f'{self.structure} -> {self.en:2.2f}'





def detour(pt, pt1, pt2):

    # fix: should also include missing bps 

    # pt = RNA.ptable_from_string(s)
    # pt1 = RNA.ptable_from_string(s1)
    # pt2 = RNA.ptable_from_string(s2)


    non_direct_bp=0
    detour_i = []
    moves_pt1 = set()
    moves_pt2 = set()

    for i in range(1,pt[0]):
        if pt[i]>0 and i<pt[i]:
            if pt[i]!=pt1[i] and pt[i]!=pt2[i]:
                detour_i.append((i, pt[i]))
        # distance to pt1
        if pt[i]!=pt1[i]:
            if i<pt1[i]:
                moves_pt1.add((-i, -pt1[i]))
            if i<pt[i]:
                moves_pt1.add((i, pt[i]))
        # distance to pt2
        if pt[i]!=pt2[i]:
            if i<pt2[i]:
                moves_pt2.add((-i, -pt1[i]))
            if i<pt2[i]:
                moves_pt2.add((i, pt[i]))


    # print (s)
    # print (s1)
    # print (s2)
    # print (non_direct_bp)

    return len(detour_i), moves_pt1, moves_pt2
    # return non_direct_bp*1.0


def stabilize(s, detour_i, fc):

    s_eval = fc.eval_structure(s)

    pt = list(RNA.ptable_from_string(s))

    for i in detour_i:
        j = pt[i]
        pt[i] = 0
        pt[j] = 0
    
    s_new = RNA.db_from_ptable(pt)
    s_eval_new = fc.eval_structure(s_new)

    # print (s, s_eval)
    # print (s_new, s_eval_new)

    return s_eval_new-s_eval


def cluster_intermediates(sequence, s1, s2, intermediates):

    fc = RNA.fold_compound(sequence)
    s1_eval = fc.eval_structure(s1)
    s2_eval = fc.eval_structure(s2)

    search_width_multiplier = 2

    max_en = findpath.init_single_findpath(
        sequence, s1, s2, search_width_multiplier, True)

    bp_dist_total = RNA.bp_distance(s1, s2)

    print(max_en)

    intermediates = list(set(intermediates))
    intermediates.sort()

    pt1 = RNA.ptable_from_string(s1)
    pt2 = RNA.ptable_from_string(s2)

    direct_moves = set()


    for i in range(1,pt1[0]):
        if pt1[i]!=pt2[i]:
            if i<pt1[i]:
                direct_moves.add((-i, -pt1[i]))
            if i<pt2[i]:
                direct_moves.add((i, pt2[i]))



    print (direct_moves)


    all_moves = set()

    saved = dict()


    for i, intermediate in enumerate(intermediates):

        pt = RNA.ptable_from_string(intermediate)
        # print (intermediate, pt)
        detour_length, moves_pt1, moves_pt2 = detour(pt, pt1, pt2)
        

        dist1 = RNA.bp_distance(intermediate, s1)
        dist2 = RNA.bp_distance(intermediate, s2)

        print (intermediate, i, "detour:", detour_length, dist1, dist2)

        # print (len(moves_pt1), dist1, moves_pt1)
        # print (len(moves_pt2), dist2, moves_pt2)
        all_moves |= moves_pt1
        all_moves |= moves_pt2      

        saved[intermediate] = moves_pt1
        # saved[intermediate] |= moves_pt2

        

        df = pd.DataFrame.from_dict(moves_pt1)
        
        # print (df)

        # break

    # print (all_moves)

    one_hot_matrix = np.zeros([len(intermediates), len(all_moves)])

    for i, move in enumerate(all_moves):
        for j, intermediate in enumerate(intermediates):
            if move in saved[intermediate]:                
                one_hot_matrix[j][i] = 1

    # print (one_hot_matrix)            


    from sklearn.decomposition import PCA
            
    Final_PCA = PCA(n_components=2, random_state=42)
    Final_PCA.fit(one_hot_matrix)
    cluster_df=Final_PCA.transform(one_hot_matrix)

    plt.plot(cluster_df, 'o', color='black');
    plt.savefig("pca.png")

    # print (cluster_df)
    print (len(one_hot_matrix), len(one_hot_matrix[0]))







    clusterer = AgglomerativeClustering(
    distance_threshold=3, n_clusters=None, linkage="average", compute_full_tree=True)
    clusterer.fit(one_hot_matrix)

    # clusterer = hdbscan.HDBSCAN()    
    # clusterer.fit(one_hot_matrix)



    
    number_of_clusters = clusterer.labels_.max()

    print ("number of clusters:", number_of_clusters+1)


    for current_label in range(number_of_clusters+1):
        
        members = (clusterer.labels_==current_label).nonzero()[0]

        # print (current_label, "m:", members)

        min_en_cluster = float("inf")

        collect_s = []
        i_list = []

        for i in members:

            intermediate = intermediates[i]

            dist1 = RNA.bp_distance(intermediate, s1)
            dist2 = RNA.bp_distance(intermediate, s2)

            max_en_s1 = findpath.init_single_findpath(sequence, intermediate, s1, search_width_multiplier, True)
            max_en_s2 = findpath.init_single_findpath(sequence, intermediate, s2, search_width_multiplier, True)

            i_list.append(intermediate)

            print (intermediate, i, "detour:", dist1, dist2, max(max_en_s1, max_en_s2), "(", max_en_s1, max_en_s2, ")")


        print (f"intermediates = {i_list}")
        print ("~~~~~~~~")








    return
















    intermediates.sort(key=lambda x: x.en)


    x = [i.structure for i in intermediates]

    distance_s1s2 = np.zeros([len(x), 4])

    distances = np.zeros([len(x), len(x)])
    for i, ts1 in enumerate(x):
        for j, ts2 in enumerate(x):
            if ts1 == ts2:
                continue
            dist = RNA.bp_distance(ts1, ts2)
            distances[i][j] = dist
            distances[j][i] = dist
        
        distance_s1s2[i][0] = RNA.bp_distance(ts1, s1)
        distance_s1s2[i][1] = RNA.bp_distance(ts1, s2)
        distance_s1s2[i][2] = len(detour(ts1, s1, s2))
        # distance_s1s2[i][3] = int(fc.eval_structure(ts1)*100)

    print ([i.structure for i in intermediates])

    from sklearn.preprocessing import normalize
    from sklearn.preprocessing import MinMaxScaler

    # min_max_scaler = MinMaxScaler()
    # distance_s1s2 = min_max_scaler.fit_transform(distance_s1s2)    

    # print (distance_s1s2)

    # model = AgglomerativeClustering(
    # distance_threshold=0, n_clusters=None, affinity="precomputed", linkage="average", compute_full_tree=True)
    # model = model.fit(distances)

    # clusterer = AgglomerativeClustering(
    # distance_threshold=0, n_clusters=None, linkage="average", compute_full_tree=True)

    clusterer = AgglomerativeClustering(
    distance_threshold=5, n_clusters=None, linkage="average", compute_full_tree=True)
    clusterer.fit(distance_s1s2)

    # clusterer = hdbscan.HDBSCAN(metric='precomputed')    
    # clusterer.fit(distances)

    # clusterer = hdbscan.HDBSCAN()    
    # clusterer.fit(distance_s1s2)

    
    number_of_clusters = clusterer.labels_.max()

    print ("number of clusters:", number_of_clusters+1)


    for current_label in range(number_of_clusters+1):
        
        members = (clusterer.labels_==current_label).nonzero()[0]

        # print (current_label, "m:", members)

        min_en_cluster = float("inf")

        collect_s = []

        for i in members:


            s = intermediates[i].structure
            current_detour = detour(s, s1, s2)

            if len(current_detour)==0: continue

            collect_s.append(s)

            en = int(fc.eval_structure(s)*100)
            if en<min_en_cluster:
                min_en_cluster = en

            max_en_s1 = findpath.init_single_findpath(sequence, s, s1, search_width_multiplier, True)
            max_en_s2 = findpath.init_single_findpath(sequence, s, s2, search_width_multiplier, True)

            stabilize_en = stabilize(s, current_detour, fc)

            print (current_label, i, s, distance_s1s2[i][0], distance_s1s2[i][1], current_detour, "/", max(max_en_s1, max_en_s2), en, stabilize_en)

        print ("done1", current_label, "min_en", min_en_cluster)

        search_width = 128
        Debug = False
        Verbose = False

        # pathfinder_i_cache.find_path(sequence, [s1], collect_s, search_width=search_width, Debug=Debug, Verbose=Verbose)

        print ("done2", current_label, "min_en", min_en_cluster)

        # pathfinder_i_cache.find_path(sequence, [s2], collect_s, search_width=search_width, Debug=Debug, Verbose=Verbose)
        # break


    # intermediates = intermediates[0:50] # does not work

    for it, i in enumerate(intermediates):

        add_node(G, i)
        max_en_s1 = findpath.init_single_findpath(sequence, i.structure, s1, search_width_multiplier, True)
        add_edge(G, i, s1_node, max_en_s1)
        max_en_s2 = findpath.init_single_findpath(sequence, i.structure, s2, search_width_multiplier, True)
        add_edge(G, i, s2_node, max_en_s2)

        pathfinder.pathfinder(sequence, s1, i.structure, search_width=2*bp_dist_total, verbose=False)
        pathfinder.pathfinder(sequence, i.structure, s2, search_width=2*bp_dist_total, verbose=False)

        i.max_en_s1 = max_en_s1
        i.max_en_s2 = max_en_s2

        # print (i, max(i.max_en_s1, i.max_en_s2), i.max_en_s1, i.max_en_s2, "bp1", i.bp_dist_s1, "bp2", i.bp_dist_s2, clusterer.labels_[it])

    intermediates.sort(key=lambda x: (max(x.max_en_s1, x.max_en_s2), (x.bp_dist_s1+x.bp_dist_s2))  )


    print ("~~~")

    intermediates = intermediates[0:30]

    # G.add_node(current_node)
    # G.nodes[current_node]['label'] = str(l+1)+" / "+str(e)
    for i in intermediates:
        print(i.structure, i.en, max(i.max_en_s1, i.max_en_s2), i.max_en_s1, i.max_en_s2, i.bp_dist_s1, i.bp_dist_s2)

        # pathfinder.pathfinder(sequence, s1, i.structure, search_width=2*bp_dist_total, verbose=True)
        # pathfinder.pathfinder(sequence, i.structure, s2, search_width=2*bp_dist_total, verbose=True)
        i.max_en_s2 = findpath.init_single_findpath(sequence, i.structure, s2, search_width_multiplier, True)

        # break

    # plot_graph(G)

    # G[last_node][current_node]['label'] = (i,j)
    # G[last_node][current_node]['weight'] = 1


if __name__ == "__main__":

    sequence = 'UAAAAUGAUCACGGUUUCAGCUUUGGACAGGGCGUUCCACUAAACUCCUGGUGACAUAGAUAUAUUGGAUUGCAACUACUCGUCGGUCCGGUUGGCGUUC'
    s1       = '..........(((...((((((..((((..((((...(((((......)))))...........(((.....))).....)))).)))))))))))))..'
    s2       = '....(((.(((((((....))).....(((((.(((......)))))))))))))))......(((((((((..((.....)))))))))))........'

    # # simple 60 nt ex
    # sequence = "GAAAGUUUUCAAGAAAGUAAUAUAGUGUCCCAGUCAGGGGGUAGUGGCGCGUUCUGGACGCAUAGUAUUC"
    # s1 = "(((....))).........(((((((((.((((...(.(.((....)).).).)))))))).)).))).."
    # s2 = ".................((.(((.((((.((((..(.(..((....)).).).))))))))))).))..."

    # 80 nt, S: -16.60 simple detour, -17.70 better one
    sequence = "CGGGAGCGAGUAUGGACCGGGUUGAAUUGGUACCUCGGCCGCCCUCUGGGGGUAGCCGACGGGCGGCUUCAGCCGGGCCC"
    s1 = ".............((.((.(((((((.(.((.(((((((.(((((...))))).))))).)))).).))))))).)).))"
    s2 = "((....)).....((.((.(((((((...........(((((((((.(.(.....)))).)))))))))))))).))))."

    intermediates

    intermediates += [
    '................((.(((((((..............((((((...((....))...))).)))))))))).))...',
    '................((.(((((((..............((((.(((..((...))..)))).)))))))))).))...',
    '................((.(((((((..............((((.(((.((....))..)))).)))))))))).))...',
    '................((.(((((((..............((((((.(..((...))..)))).)))))))))).))...',
    '................((.(((((((..............((((((.(.((....))..)))).)))))))))).))...',
    '................((.(((((((...........(((.((....)).)))..............))))))).))...',
    '................((.(((((((...........(((.(((...))))))..............))))))).))...',
    '................((.(((((((......((.((...(((((....)))..))...))))....))))))).))...',
    '................((.(((((((..............(((((((..((....)).).))).)))))))))).))...',
    '................((.(((((((..............(((((((.(.(....)).).))).)))))))))).))...',
    '................((.(((((((......((.((...((.(((...)))..))...))))....))))))).))...',
    '................((.(((((((......((((((.......))))))................))))))).))...',
    '................((.(((((((............................((((.....))))))))))).))...',
    '................((.(((((((.((............(((....)))............))..))))))).))...',
    '((....)).....((.((.(((((((...((.(.(((((.(((((...))))).))))).).))...))))))).)))).',
    '((....)).....((.((.(((((((...(..(.(((((.(((((...))))).))))).)..)...))))))).)))).',
    '((....)).....((.((.((((((((((...(.(((((.(((((...))))).))))).)..))).))))))).)))).',
    '((....)).....((.((.(((((((..(.(.(((((((.(((((...))))).))))..))).).)))))))).)))).',
    '((....)).....((.((.(((((((..(.(.(((.(((.(((((...))))).)))...))).).)))))))).)))).',
    '((....)).....((.((.(((((((..(.(.((.((((.(((((...))))).))...)))).).)))))))).)))).',
    '((....)).....((.((.(((((((..............(((((...))))).((((.....))))))))))).)))).',
    '((....)).....((.((.(((((((...........(.((((((...))))).(((....))).))))))))).)))).',
    '((....)).....((.((.(((((((...........((.(((((...))))).(((....))).))))))))).)))).',
    '((....)).....((.((.(((((((...........((((((((...))))).(((....))))))))))))).)))).',
    '((....)).....((.((.(((((((...........(((.((((...))))..(((....))))))))))))).)))).',
    '((....)).....((.((.(((((((...........((((((((...))))...((....))))))))))))).)))).',
    '((....)).....((.((.(((((((...........(((((((.....)))...((....))))))))))))).)))).',
    '((....)).....((.((.(((((((...........((((((.......))...((....))))))))))))).)))).',
    '((....)).....((.((.(((((((...........(((((((....)).)...........))))))))))).)))).',
    '((....)).....((.((.(((((((...........((((.(((....((....))...)))))))))))))).)))).',
    '((....)).....((.((.(((((((...........(((((.((....((....))...)))))))))))))).)))).',
    '((....)).....((.((.(((((((...........((((((......((....))....))))))))))))).)))).',
    '((....)).....((.((.(((((((...........(((((((.....((....))...)))))))))))))).)))).',
    '((....)).....((.((.(((((((...........(((((((.(...((....)))..)))))))))))))).)))).',
    '((....)).....((.((.(((((((...........(((((((((...((....)))).)))))))))))))).)))).',
    '((....)).....((.((.(((((((...........(((((((((.((......)))).)))))))))))))).)))).',
    ]



    sequence = 'AAAAUAAUGUACCGGACAUUCGCGCACGACCACCAUAUGGCAGAGCAUGUGUCUGUGGACCCACUAUAGCUGGGGCGCUUAACCCCAGAAAAGUAUCUUCGGUCUAUGCCUCACACGCAGCCUCCUAUUAGCAGCUCUCCUGGCCCACAA'
    s1       = '.............((((((..((...(..(((.....)))..).))..))))))(((((((....(((.((((((.......)))))).....)))....)))))))(((......((.((.........)).))......)))......'
    s2       = '......(((.((((((...(((....))).(((((((((......))))))...)))((...(((....((((((.......))))))...))).)))))))).)))(((......((.((.........)).))......)))......'
    intermediates





    cluster_intermediates(sequence, s1, s2, intermediates)

    pathfinder.pathfinder(sequence, s1, s2, verbose=True, search_width=500)


